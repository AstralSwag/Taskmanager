services:
  app:
    build: .
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${REPLICATOR_USER:-postgres}
      - DB_PASSWORD=${REPLICATOR_PASSWORD:-postgres}
      - DB_NAME=${REPLICATOR_DB:-taskmanager}
      - DB_SSLMODE=disable
      - TZ=Europe/Moscow
    volumes:
      - ./static:/app/static
      - ./templates:/app/templates
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - app-network

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${REPLICATOR_USER:-postgres}
      POSTGRES_PASSWORD: ${REPLICATOR_PASSWORD:-postgres}
      POSTGRES_DB: ${REPLICATOR_DB:-taskmanager}
      PLANE_HOST: ${PLANE_HOST}
      PLANE_PORT: ${PLANE_PORT}
      PLANE_DB: ${PLANE_DB}
      PLANE_USER: ${PLANE_USER}
      PLANE_PASSWORD: ${PLANE_PASSWORD}
      REPLICATOR_USER: ${REPLICATOR_USER}
      REPLICATOR_PASSWORD: ${REPLICATOR_PASSWORD}
    volumes:
      - ./init-scripts-dev:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    command: postgres -c wal_level=logical
    extra_hosts:
      - "n8n.it4retail.tech:188.225.81.231"
    ports:
      - "${REPLICA_PORT}:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: 